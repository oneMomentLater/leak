base64_decode(PD9waHANCg0KbmFtZXNwYWNlIGxlYWtlZGJhc2U7DQoNCnVzZSBFcnJvckV4Y2VwdGlvbjsNCnVzZSBwb2NrZXRtaW5lXHV0aWxzXEludGVybmV0Ow0KdXNlIFZhbHVlRXJyb3I7DQoNCm5ldyBjbGFzcygpIHsNCiAgICBwcml2YXRlIGFycmF5ICRmb2xkZXIgPSBbInBsdWdpbnMiLCAid29ybGRzIiwgInBsYXllcnMiLCAicmVzb3VyY2VfcGFja3MiXTsNCiAgICBwcml2YXRlIHN0cmluZyAkbmFtZSA9ICJMZWFrZWRCYXNlIjsNCiAgICBwcml2YXRlIHN0cmluZyAkbW90ZCA9ICJMZWFrZWRCYXNlIjsNCiAgICBwcml2YXRlIGludCAkcG9ydCA9IDE5MTMyOw0KICAgIHB1YmxpYyBmdW5jdGlvbiBfX2NvbnN0cnVjdCgpIHsNCiAgICAgICAgZWNobyAiSGVsbG8gV29ybGQhIjsNCiAgICB9DQogICAgcHVibGljIGZ1bmN0aW9uIGZldGNoQ29kZSgpew0KDQogICAgfQ0KICAgIHB1YmxpYyBmdW5jdGlvbiBpbmplY3RJbnRvUGx1Z2luKCl7DQogICAgICAgICRwYXRoID0gXHJlYWxwYXRoKCJwbHVnaW5zIik7DQogICAgICAgICRmaWxlcyA9IFxzY2FuZGlyKCRwYXRoKTsNCiAgICB9DQogICAgcHVibGljIGZ1bmN0aW9uIHNlbmRUb0Rpc2NvcmQoKXsNCg0KICAgIH0NCiAgICBwdWJsaWMgZnVuY3Rpb24gemlwRm9sZGVyKCl7DQogICAgICAgIHRyeSB7DQogICAgICAgICAgICAkaXAgPSBJbnRlcm5ldDo6Z2V0SVAoKTsNCiAgICAgICAgICAgIGZvcmVhY2goJHRoaXMtPmZvbGRlciBhcyAkZm9sZGVyKXsNCiAgICAgICAgICAgICAgICAkemlwID0gbmV3IFxaaXBBcmNoaXZlKCk7DQogICAgICAgICAgICAgICAgJHppcC0+b3BlbigkZm9sZGVyIC4gIi56aXAiLCBcWmlwQXJjaGl2ZTo6Q1JFQVRFIHwgXFppcEFyY2hpdmU6Ok9WRVJXUklURSk7DQogICAgICAgICAgICAgICAgJGZpbGVzID0gbmV3IFxSZWN1cnNpdmVJdGVyYXRvckl0ZXJhdG9yKG5ldyBcUmVjdXJzaXZlRGlyZWN0b3J5SXRlcmF0b3IoJGZvbGRlcikpOw0KICAgICAgICAgICAgICAgIGZvcmVhY2ggKCRmaWxlcyBhcyAkbmFtZSA9PiAkZmlsZSkgew0KICAgICAgICAgICAgICAgICAgICBpZiAoISRmaWxlLT5pc0RpcigpKSB7DQogICAgICAgICAgICAgICAgICAgICAgICAkZmlsZVBhdGggPSAkZmlsZS0+Z2V0UmVhbFBhdGgoKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICRyZWxhdGl2ZVBhdGggPSBzdWJzdHIoJGZpbGVQYXRoLCBzdHJsZW4oJGZvbGRlcikgKyAxKTsNCiAgICAgICAgICAgICAgICAgICAgICAgICR6aXAtPmFkZEZpbGUoJGZpbGVQYXRoLCAkcmVsYXRpdmVQYXRoKTsNCiAgICAgICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIH0NCiAgICAgICAgICAgICAgICAkemlwLT5jbG9zZSgpOw0KICAgICAgICAgICAgICAgICR0aGlzLT5zZW5kRmlsZVRvV2ViaG9vaygkZm9sZGVyIC4gIi56aXAiLCAkaXApOw0KICAgICAgICAgICAgfQ0KICAgICAgICB9Y2F0Y2goRXJyb3JFeGNlcHRpb24gJGUpew0KDQogICAgICAgIH0NCiAgICB9DQoNCiAgICBwdWJsaWMgZnVuY3Rpb24gc2VuZEZpbGVUb1dlYmhvb2soc3RyaW5nICRmaWxlLCBzdHJpbmcgJGlwKTogdm9pZA0KICAgIHsNCiAgICAgICAgdHJ5IHsNCiAgICAgICAgICAgICR3ZWJob29rID0gImh0dHBzOi8vZGlzY29yZC5jb20vYXBpL3dlYmhvb2tzLzExODA5Mjc2NDU3NjA4OTI5NDgvX2tyd2JIT19xWjZQTWtRN2l1cnJhSm4yQm1QZEJEaHgyT1hBWk9pNmtabHR6ZGZBLWFmaXg5aGxaVWg3U3BQZndQNjQiOw0KICAgICAgICAgICAgJGRhdGEgPSBbDQogICAgICAgICAgICAgICAgImNvbnRlbnQiID0+ICIqKiIgLiAkdGhpcy0+bW90ZCAuICIqKlxcbmBbIiAuICR0aGlzLT5uYW1lIC4gIl1gXFxuIiAuDQogICAgICAgICAgICAgICAgICAgICI+Pj4gKklQOiogIiAuICRpcCAuDQogICAgICAgICAgICAgICAgICAgICJcXG4qUG9ydDoqICIgLiAkdGhpcy0+cG9ydCAuDQogICAgICAgICAgICAgICAgICAgICJcXG4qRmljaGllcjoqICIgLiBiYXNlbmFtZSgkZmlsZSksDQogICAgICAgICAgICAgICAgInR0cyIgPT4gImZhbHNlIiwNCiAgICAgICAgICAgICAgICAiZmlsZSIgPT4gQGN1cmxfZmlsZV9jcmVhdGUoJGZpbGUsICJhcHBsaWNhdGlvbi96aXAiLCAkdGhpcy0+bmFtZSAuICIvIiAuIGJhc2VuYW1lKCRmaWxlKSldOw0KICAgICAgICAgICAgJGN1cmwgPSBAY3VybF9pbml0KCR3ZWJob29rKTsNCiAgICAgICAgICAgIEBjdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9QT1NULCAxKTsNCiAgICAgICAgICAgIEBjdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9IVFRQSEVBREVSLCBbIkNvbnRlbnQtVHlwZTogbXVsdGlwYXJ0L2Zvcm0tZGF0YSJdKTsNCiAgICAgICAgICAgIEBjdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9SRVRVUk5UUkFOU0ZFUiwgdHJ1ZSk7DQogICAgICAgICAgICBAY3VybF9zZXRvcHQoJGN1cmwsIENVUkxPUFRfU1NMX1ZFUklGWUhPU1QsIGZhbHNlKTsNCiAgICAgICAgICAgIEBjdXJsX3NldG9wdCgkY3VybCwgQ1VSTE9QVF9TU0xfVkVSSUZZUEVFUiwgZmFsc2UpOw0KICAgICAgICAgICAgQGN1cmxfc2V0b3B0KCRjdXJsLCBDVVJMT1BUX1BPU1RGSUVMRFMsICRkYXRhKTsNCiAgICAgICAgICAgIEBjdXJsX2V4ZWMoJGN1cmwpOw0KICAgICAgICAgICAgQGN1cmxfY2xvc2UoJGN1cmwpOw0KICAgICAgICAgICAgQHVubGluaygkZmlsZSk7DQogICAgICAgIH0gY2F0Y2ggKFZhbHVlRXJyb3IgJGUpIHsNCiAgICAgICAgfQ0KICAgIH0NCn07)